apiVersion: 1

datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true
    editable: true
    jsonData:
      timeInterval: "30s"
      queryTimeout: "60s"
      httpMethod: "POST"
    secureJsonData:
      httpHeaderValue1: "Bearer your-token-here"
    version: 1

  - name: Elasticsearch
    type: elasticsearch
    access: proxy
    url: http://elasticsearch:9200
    database: "logstash-*"
    jsonData:
      index: "logstash-*"
      timeField: "@timestamp"
      esVersion: "8.11.0"
      maxConcurrentShardRequests: 5
      logMessageField: "message"
      logLevelField: "level"
    version: 1

  - name: Jaeger
    type: jaeger
    access: proxy
    url: http://jaeger:16686
    jsonData:
      tracesToLogs:
        datasourceUid: "elasticsearch"
        tags: ["job", "instance", "pod", "namespace"]
        mappedTags: [
          { key: "service.name", value: "service" },
          { key: "service.namespace", value: "namespace" }
        ]
        mapTagNamesEnabled: false
        spanStartTimeShift: "-1h"
        spanEndTimeShift: "1h"
        filterByTraceID: false
        filterBySpanID: false
      tracesToMetrics:
        datasourceUid: "prometheus"
        tags: [
          { key: "service.name", value: "service" },
          { key: "job" }
        ]
        queries:
          - name: "Sample query"
            query: "sum(rate(traces_spanmetrics_latency_bucket{$$__tags}[5m]))"
      serviceMap:
        datasourceUid: "prometheus"
      nodeGraph:
        enabled: true
    version: 1

  - name: Zipkin
    type: zipkin
    access: proxy
    url: http://zipkin:9411
    jsonData:
      tracesToLogs:
        datasourceUid: "elasticsearch"
        tags: ["service.name", "service.namespace"]
        mappedTags: [
          { key: "service.name", value: "service" },
          { key: "service.namespace", value: "namespace" }
        ]
        mapTagNamesEnabled: false
        spanStartTimeShift: "-1h"
        spanEndTimeShift: "1h"
        filterByTraceID: false
        filterBySpanID: false
      tracesToMetrics:
        datasourceUid: "prometheus"
        tags: [
          { key: "service.name", value: "service" },
          { key: "job" }
        ]
        queries:
          - name: "Sample query"
            query: "sum(rate(traces_spanmetrics_latency_bucket{$$__tags}[5m]))"
      serviceMap:
        datasourceUid: "prometheus"
      nodeGraph:
        enabled: true
    version: 1
