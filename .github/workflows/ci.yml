name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'  # 所有分支的push都触发
  pull_request:
    branches:
      - '**'  # 所有分支的PR都触发

# 设置并发控制，避免同一分支的多个工作流同时运行
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==================== 后端测试 Job ====================
  backend-tests:
    name: 后端测试 (Java 17 + Maven)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 完整历史，用于Codecov
      
      - name: 设置 Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: 缓存 Maven 依赖
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: 运行 Maven 测试
        run: mvn clean test -B
        env:
          MAVEN_OPTS: "-Xmx1024m"
      
      - name: 生成 JaCoCo 覆盖率报告
        run: mvn jacoco:report
      
      - name: 上传后端覆盖率报告
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: target/site/jacoco/
          retention-days: 7
      
      - name: 上传后端测试结果
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: target/surefire-reports/
          retention-days: 7

  # ==================== 前端测试 Job ====================
  frontend-tests:
    name: 前端测试 (Node.js 18 + Vitest)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    defaults:
      run:
        working-directory: frontend
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 完整历史，用于Codecov
      
      - name: 设置 Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: 安装依赖
        run: npm ci
      
      - name: 运行 Vitest 测试并生成覆盖率
        run: npm run test:coverage
        env:
          NODE_ENV: test
      
      - name: 上传前端覆盖率报告
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/
          retention-days: 7
      
      - name: 上传前端测试结果
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-results
          path: frontend/test-results/
          retention-days: 7
          if-no-files-found: ignore

  # ==================== 上传覆盖率到 Codecov ====================
  upload-coverage:
    name: 上传覆盖率报告
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: always()  # 即使测试失败也上传覆盖率
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 下载后端覆盖率报告
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage
          path: backend-coverage
        continue-on-error: true
      
      - name: 下载前端覆盖率报告
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: frontend-coverage
        continue-on-error: true
      
      - name: 上传后端覆盖率到 Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./backend-coverage/jacoco.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false  # 不因Codecov上传失败而失败CI
          verbose: true
        continue-on-error: true
      
      - name: 上传前端覆盖率到 Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./frontend-coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false
          verbose: true
        continue-on-error: true
      
      - name: 覆盖率报告摘要
        if: always()
        run: |
          echo "## 📊 覆盖率报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ 覆盖率报告已生成并上传到 Codecov" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 后端覆盖率：查看 [Codecov Dashboard](https://codecov.io/gh/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          echo "- 前端覆盖率：查看 [Codecov Dashboard](https://codecov.io/gh/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📁 详细报告已保存为 Artifacts，可在 Actions 页面下载" >> $GITHUB_STEP_SUMMARY

  # ==================== 测试结果汇总 ====================
  test-summary:
    name: 测试结果汇总
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, upload-coverage]
    if: always()
    
    steps:
      - name: 检查测试结果
        run: |
          echo "## 🧪 测试结果汇总" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.backend-tests.result }}" == "success" ]; then
            echo "✅ 后端测试：通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 后端测试：失败" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.frontend-tests.result }}" == "success" ]; then
            echo "✅ 前端测试：通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 前端测试：失败" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.upload-coverage.result }}" == "success" ]; then
            echo "✅ 覆盖率上传：成功" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️  覆盖率上传：部分失败（不影响CI）" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📝 **提交信息**: ${{ github.event.head_commit.message }}" >> $GITHUB_STEP_SUMMARY
          echo "👤 **提交者**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "🌿 **分支**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **工作流**: [查看详情](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
      
      - name: 标记整体失败
        if: needs.backend-tests.result != 'success' || needs.frontend-tests.result != 'success'
        run: |
          echo "❌ CI 失败：至少一个测试 Job 未通过"
          exit 1

